package qbit

import kotlin.test.Test
import kotlin.test.assertEquals

class LocalConnTest {

//    @Ignore
//    @Test
//    fun testUpdateByDetached() {
//        val id = ScalarAttr(root["id"], QLong)
//        val conn = qbit(MemStorage())
//        conn.persist(id)
//        val e = Entity(id eq 1)
//        val se = conn.persist(e).storedEntity()
//        val detached = DetachedEntity<EID>(se.eid, e)
//        val wr = conn.persist(detached)
//        assertEquals(0, wr.createdEntities.size, "No new entities expected, when persisting detached entity with existing eid")
//    }
//
//    @Ignore
//    @Test
//    fun testPersistTwoCandidatesWithSameUniqueValue() {
//        val id = ScalarAttr(root["id"], QLong)
//        val value = ScalarAttr(root["val"], QString)
//        val conn = qbit(MemStorage())
//        conn.persist(id, value).storedEntity()
//        var e = Entity(id eq 1, value eq "val1")
//        e = conn.persist(e).storedEntity()
//        val e1 = e.with(value eq "val2")
//        val e2 = e.with(value eq "val3")
//        // what is expected behaviour in this case? merge? get first? get last?
//        conn.persist(e1, e2)
//    }
//
//    @Ignore
//    @Test
//    fun testPersistEmptyEntity() {
//        val conn = qbit(MemStorage())
//        val e = conn.persist(Entity()).storedEntity()
//        assertNotNull(e)
//        assertNotNull(e.eid)
//    }
//
//    @Ignore
//    @Test
//    fun testPersistEmptyList() {
//        val scalar = ScalarAttr(root["sclr"], QInt)
//        val lst = ListAttr(root["lst"], QInt)
//        val conn = qbit(MemStorage())
//        val e = conn.persist(lst, scalar, Entity(scalar eq 1, lst eq emptyList())).persistedEntities[2]
//        assertEquals(emptyList(), e[lst])
//    }
//
//    @Ignore
//    @Test
//    fun testManualEIDGeneration() {
//        val attr = ScalarAttr(root["attr"], QInt, unique = true)
//        val conn = qbit(MemStorage())
//        conn.persist(
//                attr /* eid = 1/9*/,
//                DetachedEntity(EID(1, 10), mapOf<Attr<*>, Any>(attr to 1)),
//                Entity(attr eq 2) /* autogenerated eid = 1/10 */
//        ).persistedEntities[1]
//    }

}


